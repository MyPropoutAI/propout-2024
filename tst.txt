import { useState, useEffect } from "react";
import { Button } from "../../components/ui/button";
import { Input } from "../../components/ui/input";
import { Textarea } from "../../components/ui/textarea";
import { TransactionButton, useActiveAccount, useWeb3 } from "thirdweb/react";
import { prepareContractCall, resolveMethod } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";
// import { useListProperty } from "../../lib/constants";
import { contract } from "../../lib/utils";

const ListProperty = () => {
  const [images, setImages] = useState([""]);
  const { mutate: sendTransaction, isLoading, isError } = useSendTransaction();
  const { network } = useWeb3();
  const account = useActiveAccount();

  const [form, setForm] = useState({
    owner: "",
    _propertyTitle: " ",
    price: "10",
    _description: " ",
    _images:
      "https://images.propertypro.ng/large/2-bedroom-detached-bungalow-in-epe-lagos-nigeria-73WIcgOJYA8u2u3mDZK3.jpg",
    _propertyAddress: " ",
  });

  const [isWrongNetwork, setIsWrongNetwork] = useState(false);

  useEffect(() => {
    if (network && network.chainId!== 1) {
      setIsWrongNetwork(true);
    } else {
      setIsWrongNetwork(false);
    }
  }, [network]);

  const handleImageChange = (e, index) => {
    const file = e.target.files[0];
    const newImages = [...images];
    newImages[index] = URL.createObjectURL(file);
    setImages(newImages);
  };

  const handleAddImage = () => {
    setImages([...images, ""]);
  };

  const handleFormChange = (fieldName, e) => {
    setForm({...form, [fieldName]: e.target.value });
  };

  const call = async () => {
    const transaction = await prepareContractCall({
      contract,
      method: resolveMethod("listProperty"),
      params: [
        account.address,
        form.price,
        form._propertyTitle,
        form._images,
        form._propertyAddress,
        form._description,
      ],
    });
    const { transactionHash } = await sendTransaction(transaction);
  };

  return (
    <div className="bg-white p-8 rounded-md max-w-full">
      <div className="border-2 p-4 rounded-md flex gap-5 relative max-w-full">
        <div className="flex gap-4 overflow-x-auto max-w-full">
          {images.map((image, i) => (
            <UploadImage
              image={image}
              handleUpload={handleImageChange}
              key={i}
              i={i}
            />
          ))}
        </div>

        <div
          className="absolute right-0 top-0 bg-white h-full p-6 flex place-items-center cursor-pointer shadow-2xl"
          onClick={handleAddImage}
        >
          <img
            src="/images/Add Image.svg"
            alt=""
            className="w-10 aspect-square lg:w-14"
          />
        </div>
      </div>

      <div className="flex gap-20 flex-col lg:flex-row mt-10">
        <div className="flex-[3] flex  ">
          <div className="flex flex-col gap-5 w-full">
            <div>
              <Input
                type="text"
                placeholder="Headline"
                className="w-full texl-lg"
              />
            </div>
            <div>
              <Input
                type="text"
                placeholder="Property Price"
                className="w-full texl-lg"
              />
            </div>
            <div>
              <Input
                type="text"
                placeholder="Square ft"
                className="w-full texl-lg"
              />
            </div>
<div>
              <Input
                type="text"
                placeholder="Address"
                className="w-full texl-lg"
              />
            </div>
            <div>
              <Textarea
                placeholder="Description"
                className="w-full texl-lg"
              />
            </div>
          </div>
        </div>

        <div className="flex-[2]">
          <div className="bg-white p-8 rounded-md max-w-full">
            <div className="text-2xl font-bold mb-5">
              <p>Preview</p>
            </div>
            <div className="flex flex-col gap-5">
              <div className="flex gap-5">
                <img
                  src={images[0]}
                  alt=""
                  className="w-full h-full object-cover rounded-md"
                />
              </div>
              <div>
                <p className="text-xl font-bold">{form._propertyTitle}</p>
                <p className="text-gray-500">{form._propertyAddress}</p>
                <p className="text-gray-500">{form.price} ETH</p>
              </div>
              <div>
                <p className="text-xl font-bold">Description</p>
                <p className="text-gray-500">{form._description}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-10">
        <TransactionButton
          contractAddress={contract.address}
          contractAbi={contract.abi}
          isLoading={isLoading}
          isError={isError}
          isWrongNetwork={isWrongNetwork}
          onSuccess={call}
          actionName="List Property"
          form={form}
          setForm={setForm}
        />
      </div>
    </div>
  );
};

export default ListProperty;






import { useState } from "react";
import { Button } from "../../components/ui/button";
import { useActiveAccount, useWeb3 } from "thirdweb/react";
import { useSendTransaction } from "thirdweb/react";
import { prepareContractCall, resolveMethod } from "thirdweb";

const TransactionButton = ({
  contractAddress,
  contractAbi,
  isLoading,
  isError,
  isWrongNetwork,
  onSuccess,
  actionName,
  form,
  setForm,
}) => {
  const { mutate: sendTransaction, isLoading: isTransactionLoading } =
    useSendTransaction();
  const { network } = useWeb3();
  const account = useActiveAccount();

  const [isConfirming, setIsConfirming] = useState(false);

  const handleTransaction = async () => {
    if (!account) {
      alert("Please connect your wallet");
      return;
    }

    if (isWrongNetwork) {
      alert("Please switch to the correct network");
      return;
    }

    setIsConfirming(true);

    const transaction = await prepareContractCall({
      contract: contractAddress,
      method: resolveMethod(actionName),
      params: [form],
    });

    const { transactionHash } = await sendTransaction(transaction);

    onSuccess();
  };

  return (
    <div className="mt-10">
      <Button
        className="w-full"
        disabled={isTransactionLoading || isConfirming}
        onClick={handleTransaction}
      >
        {isTransactionLoading || isConfirming ? "Loading..." : actionName}
      </Button>
    </div>
  );
};

export default TransactionButton;